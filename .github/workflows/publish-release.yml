name: Build and Publish Release

on:
  push:
    tags:
      - '*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Extract Version from POM
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build with Maven
        run: mvn clean package

      - name: Check if Release Already Exists
        id: check_release
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref }})
          echo "RESPONSE=$RESPONSE" >> $GITHUB_ENV
          if [[ $RESPONSE == *"\"id\":"* ]]; then
            RELEASE_ID=$(echo $RESPONSE | jq '.id')
            echo "Deleting existing release $RELEASE_ID"
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/telemetry-nucleus-emitter-${{ env.VERSION }}.jar
          asset_name: telemetry-nucleus-emitter-${{ env.VERSION }}.jar
          asset_content_type: application/java-archive
